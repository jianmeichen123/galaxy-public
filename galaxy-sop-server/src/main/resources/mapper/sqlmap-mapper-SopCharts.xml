<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.galaxyinternet.model.chart.SopCharts">
	<resultMap id="BaseResultMap"
		type="com.galaxyinternet.model.chart.SopCharts">
		<result column="project_count" jdbcType="BIGINT" property="projectCount" />
		<result column="project_progress" jdbcType="VARCHAR" property="projectProgress" />
		<result column="project_date" jdbcType="VARCHAR" property="projectDate" />
		<result column="department_id" jdbcType="BIGINT" property="departmentId"/>
		<result column="department_name" jdbcType="VARCHAR" property="departmentName"/>
		<result column="project_type" jdbcType="VARCHAR" property="projectType"/>
		<result column="create_uid" jdbcType="BIGINT" property="createUid"/>
		<result column="create_uname" jdbcType="VARCHAR" property="createUname"/>
		<result column="appraisement" jdbcType="BIGINT" property="appraisement"/>
		<result column="invest" jdbcType="BIGINT" property="invest"/>
	</resultMap>
	
	<sql id="Base_Where_Clause">
		<where>
			<trim prefixOverrides="and">
				<if test="projectType != null"> and project_type = #{projectType,jdbcType=VARCHAR} </if>
				<if test="projectStatus != null"> and project_status != #{projectStatus,jdbcType=VARCHAR} </if>
				<if test="startTime!=null"><![CDATA[  and created_time >= #{startTime,jdbcType=BIGINT} ]]></if>
				<if test="endTime!=null"><![CDATA[  and created_time <= #{endTime,jdbcType=BIGINT} ]]></if>
				<if test="departmentId != null"> and project_departId = #{departmentId,jdbcType=BIGINT}</if>
				<if test="projectProgress != null"> and project_progress = #{projectProgress,jdbcType=VARCHAR}</if>
				<if test="createUid != null"> and create_uid = #{createUid,jdbcType=BIGINT}</if>
			</trim>
		</where>
	</sql>


	<!-- 查询 -->
	<select id="selectOverView" resultMap="BaseResultMap"
		parameterType="java.util.Map">
		
		select 		dict.dict_code as project_progress, ifnull(main.projectCount,0) as projectCount
		from 
					(select * from dict where parent_code = 'projectProgress') dict 
		left join
					(select 	project_progress,count(0) as projectCount
					 from 		sop_project
					 <include refid="Base_Where_Clause" />
					 group by 	project_progress ) main
		on			main.project_progress = dict.dict_code
	</select>

	<!-- 查询总数 -->
	<select id="selectCount" resultType="java.lang.Long"
		parameterType="java.util.Map">
		select count(0) from sop_project
		<include refid="Base_Where_Clause" />
	</select>

	<!-- 查询总数 -->
	<select id="selectCompleteCount" resultType="java.lang.Long"
		parameterType="java.util.Map">
		select count(0) as complete_count from sop_project
		<include refid="Base_Where_Clause" />
	</select>
	
	<!-- 根据日期分组查询目标数 -->
	<select id="selectCountGroupDate" resultMap="BaseResultMap" parameterType="java.util.Map">
		select 	
		<choose>
			<when test="dateType!=null">
				from_unixtime(created_time/1000,#{dateType,jdbcType=VARCHAR}) as project_date,
			</when>
			<otherwise>
				from_unixtime(created_time/1000,'%Y-%m-%d') as project_date,
			</otherwise>
		</choose>
		count(0) as project_count 
		from sop_project
		<include refid="Base_Where_Clause" />
		group by 
		<choose>
			<when test="dateType!=null">
				from_unixtime(created_time/1000,#{dateType,jdbcType=VARCHAR})
			</when>
			<otherwise>
				from_unixtime(created_time/1000,'%Y-%m-%d') 
			</otherwise>
		</choose>
		order by project_date asc 
	</select>
	<!-- 根据事业线，投资经理，项目类型，日期分组查询目标数 -->
	<select id="selectCountGroupAll" resultMap="BaseResultMap" parameterType="java.util.Map">
		select 	
		<choose>
			<when test="dateType!=null">
				from_unixtime(created_time/1000,#{dateType,jdbcType=VARCHAR}) as project_date,
			</when>
			<otherwise>
				from_unixtime(created_time/1000,'%Y-%m-%d') as project_date,
			</otherwise>
		</choose>
		count(0) as project_count,
		project_departId as department_id,
		project_type,
		create_uid
		from sop_project
		<include refid="Base_Where_Clause" />
		group by 
		<choose>
			<when test="dateType!=null">
				from_unixtime(created_time/1000,#{dateType,jdbcType=VARCHAR}),
			</when>
			<otherwise>
				from_unixtime(created_time/1000,'%Y-%m-%d'),
			</otherwise>
		</choose>
		project_departId,project_type,create_uid
		 order by project_date asc 
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
	<select id="selectCountGroupAllCount" resultType="java.lang.Long"
		parameterType="java.util.Map">
		select count(0) from (
			select	
				<choose>
					<when test="dateType!=null">
						from_unixtime(created_time/1000,#{dateType,jdbcType=VARCHAR}) as project_date,
					</when>
					<otherwise>
						from_unixtime(created_time/1000,'%Y-%m-%d') as project_date,
					</otherwise>
				</choose>	
				project_departId as department_Id,
				project_type,
				create_uid,
				count(0) projectCount
				from  sop_project 
				<include refid="Base_Where_Clause" />
				group by 	
							<choose>
								<when test="dateType!=null">
									from_unixtime(created_time/1000,#{dateType,jdbcType=VARCHAR}),
								</when>
								<otherwise>
									from_unixtime(created_time/1000,'%Y-%m-%d'),
								</otherwise>
							</choose>
							project_departId,
							project_type,
							create_uid
				order by 	project_Date asc
			) a	
	</select>
	
	<select id="selectInvestmentGroupDate" resultMap="BaseResultMap" parameterType="java.util.Map" >
		select 		ifnull(sum(project_valuations),0)  as appraisement , 
					ifnull(sum(project_contribution),0) as invest, 
					from_unixtime(created_time/1000,'%Y-%m') as project_date
		from 		sop_project 
		<include refid="Base_Where_Clause" />
		group by 	from_unixtime(created_time/1000,'%Y-%m')
	</select>
	
	
	<select id="searchPostAnalysis" resultMap="BaseResultMap" parameterType="java.util.Map">		
		select a.project_departId as department_id,a.department_name,ifnull(a.wbCount,0) as wbCount,ifnull(b.nbCount,0) as nbCount from 
			(select dm.id as project_departId,dm.name as department_name,pc.wbCount
			 from
				(select id,name,belong_type 
				 from 	t_department 
				 where 	type='1'
				 <if test="belongType != null"> and belong_type = #{belongType,jdbcType=BIGINT} </if>
				) dm
				left join
				(select 	project_type,project_departId,count(0) as wbCount
				 from		sop_project
				 where		project_type='projectType:1'
				 and		project_progress='projectProgress:10'
				 group by	project_departId) pc
				on dm.id = pc.project_departId
				) a
		left join 
			(select dm.id as project_departId,dm.name as department_name,pc.nbCount
			 from
				(select 	id,name,belong_type 
				 from 		t_department 
				 where 		type='1'	
				 <if test="belongType != null"> and belong_type = #{belongType,jdbcType=BIGINT} </if>
				) dm
			 left join
				(select 	project_type,project_departId,count(0) as nbCount
				 from		sop_project
				 where		project_type='projectType:2'
				 and		project_progress='projectProgress:10'
				 group by	project_departId) pc
				on dm.id = pc.project_departId
				) b
			on	 a.project_departId = b.project_departId
	</select>
	
	<select id="searchPostAnalysisByHhr" resultMap="BaseResultMap" parameterType="java.util.Map">
	select a.create_uid,a.create_uname,ifnull(a.wbCount,0) as wbCount,ifnull(b.nbCount,0) as nbCount from 
	   (select du.id as create_uid,du.real_name as create_uname,pc.wbCount from
	   			(select 	pu.id,pu.real_name,pu.department_id  
	   		 	 from 		platform_user pu,platform_user_role pur
	   		 	 where 		pu.id = pur.user_id 
	   		 	 and 		pur.role_id = '4'
	   		 	 <if test="departmentId != null"> and pu.department_id = #{departmentId,jdbcType=BIGINT}</if> ) du
	    left join
	   			(select 	create_Uid,count(0) as wbCount
			 	 from		sop_project
			 	 where		project_type='projectType:1'
			 	 and		project_progress='projectProgress:10'
			 	 <if test="departmentId != null"> and project_departId = #{departmentId,jdbcType=BIGINT}</if> 
			 	 group by 	create_Uid	 ) pc
	    on	du.id = pc.create_uid ) a
	left join 	   
	   (select du.id as create_uid,du.real_name as create_uname,pc.nbCount from
	   			(select 	pu.id,pu.real_name,pu.department_id  
	   		 	 from 		platform_user pu,platform_user_role pur
	   		 	 where 		pu.id = pur.user_id 
	   		 	 and 		pur.role_id = '4'
	   		 	 <if test="departmentId != null"> and pu.department_id = #{departmentId,jdbcType=BIGINT}</if> ) du
	    left join
	   			 (select 	create_Uid,count(0) as nbCount
			 	  from		sop_project
			 	  where		project_type='projectType:2'
			 	  and		project_progress='projectProgress:10'
			 	  <if test="departmentId != null"> and project_departId = #{departmentId,jdbcType=BIGINT}</if> 			   	  
			 	  group by 	create_Uid	 ) pc
	   	on	du.id = pc.create_uid ) b
	on a.create_uid = b.create_uid
	</select>
	
	
	
</mapper>